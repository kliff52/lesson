# 1.
'''
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''

# from sys import argv
# name, time, rate, bonus = (argv)
# t = int(time)
# r = int(rate)
# b = int(bonus)
# print('Выроботка в часах', time)
# print('Ставка в час', rate)
# print('Премия', bonus)
# a = (t * r) + b
# print('Заработная плата равна: ', a)

# 2.
'''Представлен список чисел. Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].'''

# original_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# new_list = [num for el, num in enumerate(original_list) if original_list[el] > original_list[el -1] and el != 0]
# print(new_list)

'''Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.'''

# my_set = {el: el for el in range(20, 240) if (el % 20) == 0 or (el % 21) == 0}
# list  = list(my_set)
# print(list)

# 3.
'''Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]'''

# original_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# new_list = [el for el in original_list if original_list.count(el) == 1]
# print(new_list)

# 4.
'''Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().'''

# from functools import reduce
# def my_func(x1,x2):
#     return x1*x2
#
# my_list = [el for el in range(100, 1000, 2)]
# print(reduce(my_func, my_list))

# 5.
'''Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.'''

# from itertools import count, cycle
#
# a = int(input('Введите начальное число'))
# b = int(input('Введите конечное число'))
# for el in count(a):
#     if el > b:
#         break
#     else:
#         print(el)
#
# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
# c = 0
# for el in cycle(my_list):
#     if c > 25:
#         break
#     print(el)
#     c += 1

# 6.
'''Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только
первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n.
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24'''

# def fact(n):
#     factorial = 1
#     for i in range(2, n+1):
#         factorial *= i
#         yield factorial
# for el in fact(5):
#      print(el)
